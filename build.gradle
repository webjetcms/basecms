import org.apache.tools.ant.taskdefs.condition.Os

import com.github.jk1.license.render.*
import com.github.jk1.license.filter.*

/*
 * WebJET CMS base project build file
 */

plugins {
    id 'java'
    id 'war'
    https://github.com/gretty-gradle-plugin/gretty
    id 'org.gretty' version "4.1.6"
    //https://plugins.gradle.org/plugin/io.freefair.lombok
    id "io.freefair.lombok" version "8.11"
    http://jeremylong.github.io/DependencyCheck/dependency-check-gradle/index.html
    id "org.owasp.dependencycheck" version "12.1.0"
    //https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id 'jacoco'
    //https://github.com/jk1/Gradle-License-Report
    id 'com.github.jk1.dependency-license-report' version '2.5'
    //https://github.com/radarsh/gradle-test-logger-plugin
    id 'com.adarshr.test-logger' version '4.0.0'
    //https://docs.gradle.org/current/userguide/idea_plugin.html
    id 'idea'
}

repositories {
    mavenCentral()
    maven {
        url "https://pd4ml.tech/maven2/"
    }
    maven {
        name = "github"
        url = uri("https://maven.pkg.github.com/webjetcms/webjetcms")
        credentials {
            //define in gradle.properties or as environment variables
            username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
            password = project.findProperty("gpr.api-key") ?: System.getenv("GPR_API_KEY")
        }
    }
    flatDir {
       dirs 'libs'
   }
}

ext {
    webjetVersion = "2025.0-jakarta-SNAPSHOT";
    lombokVersion = "1.18.34";
    npm = Os.isFamily(Os.FAMILY_WINDOWS) ? "npm.cmd" : "npm";
    npx = Os.isFamily(Os.FAMILY_WINDOWS) ? "npx.cmd" : "npx";
}

war {
    zip64 = true
    exclude('**/node_modules/**')
    exclude('**/node_scripts/**')
    exclude('**/src/**')
    exclude('**/tmp/**')
    exclude('**/*.md')
    exclude('**/*.log')
    exclude('**/*.map')
    exclude('**/.npmrc')
    exclude('**/.editorconfig')
    exclude('**/gulpfile.js')
    exclude('**/package-lock.json')
    exclude('**/package.json')
    exclude('**/webpack*.js')
    exclude('**/WEB-INF/imgcache/**')
    exclude('**/scss/**')
    exclude('**/LICENSE')
    exclude('scratchpad*.jsp')
    exclude('localconf*.jsp')
    //do not include poolman-local.xml
    rootSpec.exclude('**/poolman-*.xml')
    //do not include sample (basecms) files
    exclude('src/main/java/sk/iway/basecms/**')
    exclude('src/main/webapp/apps/basecms/**')
    exclude('src/main/webapp/apps/contact/**')
}

// build public war (exclude admin files), run gradlew buildAllArtifacts to build it into build/libs/rootProject.name-public.war
def defaultExcludes = file('gradle/config/defaultExcludes.txt').text.readLines()
def defaultPublicExcludes = file('gradle/config/defaultPublicExcludes.txt').text.readLines()

task prepareDataForPublicWar() {
    // Get the path to the .war file that will be unpacked
    def warFile = file("${buildDir}/libs/${rootProject.name}.war")

    // Get the path to the directory where the .war file will be unpacked
    def publicTempDir = file("${buildDir}/public-temp")

    // Ensure that the tempDir exists
    delete publicTempDir
    publicTempDir.mkdirs()

    doLast {
        // Unpack the .war file into tempDir
        copy {
            from zipTree(warFile)
            into publicTempDir
        }

        // Remove the .jar file from tempDir
        delete fileTree("${publicTempDir}/WEB-INF/lib").matching {
            include "webjetcms-${webjetVersion}-admin.jar"
        }

        // Unpack components.jar into tempDir/components-all
        def componentsJar = file("${publicTempDir}/WEB-INF/lib/webjetcms-${webjetVersion}-components.jar")
        def componentsAllDir = file("${publicTempDir}/components-all")
        componentsAllDir.mkdirs()
        copy {
            from zipTree(componentsJar)
            into componentsAllDir
        }
        delete componentsJar
    }
}

task zipAllComponentsBackToJar(type: Zip) {
    def publicTempDir = file("${buildDir}/public-temp")
    def componentsJar = file("${publicTempDir}/WEB-INF/lib/webjetcms-${webjetVersion}-components.jar")
    def componentsAllDir = file("${publicTempDir}/components-all")

    from componentsAllDir
    includeEmptyDirs = false
    exclude defaultExcludes
    exclude defaultPublicExcludes
    exclude "**/admin*"
    archiveFileName = componentsJar.name
    archiveExtension = "jar"
    destinationDirectory = componentsJar.parentFile
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    doLast {
        delete componentsAllDir
    }
}

task buildAllArtifacts(type: Zip) {
    dependsOn clean
    dependsOn war
    dependsOn prepareDataForPublicWar
    dependsOn zipAllComponentsBackToJar

    // these tasks must be executed in the correct order, for makeCli tasks the order does not matter
    tasks.findByName('war').mustRunAfter 'clean'
    tasks.findByName('prepareDataForPublicWar').mustRunAfter 'war'
    tasks.findByName('zipAllComponentsBackToJar').mustRunAfter 'prepareDataForPublicWar'

    // Define the output file
    def outputWar = file("${buildDir}/libs/${rootProject.name}-public.war")
    // Get the path to the directory where the .war file will be unpacked
    def publicTempDir = file("${buildDir}/public-temp")

    // Package tempDir into the output war file
    from publicTempDir
    includeEmptyDirs = false
    exclude defaultExcludes
    exclude defaultPublicExcludes
    exclude "/apps/**/admin*"
    exclude "/components/**/admin*"
    exclude "**/classes/**/admin/*Controller*"
    exclude "**/classes/**/Admin*Controller*"
    exclude "**/adminsearch*"
    archiveFileName = outputWar.name
    archiveExtension = "war"
    destinationDirectory = outputWar.parentFile
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    doLast {
        delete publicTempDir
    }
}
// end of build public war

//CI-CD tasks
task explodeWar(dependsOn: ['clean', 'war'], type : Copy){
    def workingDir = "build/explodedWar"
    def zipFile = file("build/libs/${rootProject.name}.war")
    from zipTree(zipFile)
    into workingDir

}
task rsyncExplodedWar(dependsOn : explodeWar,  type: Exec) {
     commandLine "/usr/local/bin/wj-rsync.sh","webjet4.dev.iway.sk","build/explodedWar","/www/tomcat_au27/webapps/${rootProject.name}","tomcat_au27.service","tomcat_au27"
}

//testing
task npminstalltest(type: Exec) {
    workingDir 'src/test/webapp/'
    commandLine project.ext.npm, 'install'
}

task rune2etest(type: Exec) {
    workingDir 'src/test/webapp/'
    commandLine project.ext.npx, 'codeceptjs', 'run', '--steps'
}

//updatezip - prepares build/update-DATE.zip for updating WebJET in an unpacked structure (old format without jar packaging)
task updatezip(type: Exec)  {
    workingDir 'ant/'
    commandLine "ant", "-buildfile", "updatezip.xml", "-Dv8version=${webjetVersion}", "-Dprojectname=${rootProject.name}"
}

//dependency check - https://jeremylong.github.io/DependencyCheck/index.html
dependencyCheck {
    scanConfigurations=["runtimeClasspath"]
    //format see https://gist.github.com/milo-minderbinder/1e1ed911c5b2264dc659578f1baaef16
    suppressionFiles=[
        file(new File(project.rootDir, 'dependency-check-suppressions.xml')),
        file(new File(project.rootDir, 'dependency-check-suppressions-project.xml'))
    ]
    analyzers {
        assemblyEnabled=false
        nodeEnabled=false
        nodeAudit {
            yarnEnabled=false
            skipDevDependencies=true
            pnpmEnabled=false
        }
    }
}

licenseReport {
    filters = [new LicenseBundleNormalizer(bundlePath: "$projectDir/licensereport-normalization.json")]
    allowedLicensesFile = new File("$projectDir/licensereport-allowed.json")
    renderers = [new InventoryHtmlReportRenderer()]
}

//code coverage report - generate HTML report from jacoco.exec files
task('generateJacocoReport', type: JacocoReport) {

  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  sourceDirectories.setFrom project.files(project.sourceSets.main.allSource.srcDirs)
  classDirectories.setFrom project.sourceSets.main.output

  def reportDir = project.reporting.file("${rootDir}/build/jacoco/report")
  reports {
    html.outputLocation = reportDir
  }
  doLast {
    System.out.println "Jacoco report for server created: file://${reportDir.toURI().path}index.html"
  }
}

dependencies {
    implementation("com.webjetcms:webjetcms:${webjetVersion}")
    implementation("com.webjetcms:webjetcms:${webjetVersion}:admin")
    implementation("com.webjetcms:webjetcms:${webjetVersion}:components")
    implementation("com.webjetcms:webjetcms:${webjetVersion}:libs")

    providedCompile 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    providedCompile 'jakarta.servlet.jsp:jakarta.servlet.jsp-api:3.1.1'
    providedCompile 'jakarta.el:jakarta.el-api:5.0.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation 'org.mockito:mockito-core:5.15.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testRuntimeOnly 'org.glassfish:javax.el:3.0.0'

    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    testImplementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.29.0'

}

configurations {
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'org.slf4j', module: 'jcl104-over-slf4j' //je nahradene novsim jcl-over-slf4j
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    all*.exclude group: 'log4j', module: 'log4j'

    grettyRunnerTomcat10 {
        // gretty pouziva staru verziu commons-io, ktora koliduje s nasou
        // https://mvnrepository.com/artifact/commons-io/commons-io
        exclude group: 'commons-io', module: 'commons-io'
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileJava {
    options.incremental = true
    options.fork = true
    options.failOnError = true
    options.encoding = "utf-8"
}

lombok {
    version = "${lombokVersion}"
}

//code coverage
jacoco {
    //set latest version
    toolVersion = "+"
}

test {
    useJUnitPlatform()
}

gretty {
    // supported values:
    // 'jetty7', 'jetty8', 'jetty9', 'jetty9.3', 'jetty9.4', 'tomcat7', 'tomcat8'
    servletContainer = 'tomcat10'
    contextPath = ''
    httpPort = 80
    httpsEnabled = true
    httpsPort = 443
    //hard mode runs WJ directly from src/main/webapp which speeds up the start (no need to copy JSP files elsewhere)
    inplaceMode = 'hard'
    //scanning for hotswap
    scanInterval = 0
    scanner = 'jetty'
    scanDir "${projectDir}/build/classes/java/main"
    fastReload = true
    //we want tomcat not to reload after a class change, in the IDE you need to click on Hot Code Replace to apply the change in the class
    reloadOnClassChange = false
    debugSuspend = false
    //JVM parameters
    jvmArgs = [
        //recommended variables for Tomcat
        '-Dsun.net.client.defaultConnectTimeout=300000',
        '-Dsun.net.client.defaultReadTimeout=300000',
        '-Dfile.encoding=utf-8',
        '-Duser.language=sk',
        '-Duser.country=SK',
        //enable remote debug on port 5005
        '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005',
        //Configuration adjustment for WebJET, this overrides values from the database in Control Panel->Configuration
        '-Dwebjet.smtpServer=smtp.interway.sk',
        "-DwebjetDbname=${System.env.webjetDbname}",
        //list of docid that can be directly opened without login for Launch Chrome debug mode
        "-Dwebjet.showDocActionAllowedDocids=4,26",
        '-Dwebjet.serverMonitoringEnableJPA=true',
        '-Dwebjet.loggerUseAnsiColors=true'
    ]

    //enable jacoco also for appStart and appStartDebug tasks
    afterEvaluate {
        tasks.appStart {
            file("${rootDir}/build/jacoco/appStart.exec").delete()
            jacoco {
                enabled = true
            }
            finalizedBy tasks.generateJacocoReport
        }
        tasks.appStartDebug {
            file("${rootDir}/build/jacoco/appStartDebug.exec").delete()
            jacoco {
                //enabled = true
            }
            //finalizedBy tasks.generateJacocoReport
        }
        tasks.appAfterIntegrationTest {
            finalizedBy tasks.generateJacocoReport
        }
    }
}

tasks.withType(JavaCompile) {
    options.failOnError = false
    //prevent warning messages during compile
    options.compilerArgs += ['-Xlint:none']
    //needed for Spring
    options.compilerArgs += ['-parameters']
}