//package helpers;
//
//import models.TableModel;
//import org.openqa.selenium.*;
//import org.openqa.selenium.support.FindBy;
//import pages.modals.AddForm;
//import pages.modals.ExportForm;
//import pages.modals.RemoveForm;
//
//import java.util.*;
//
//public class TableController extends BasePage{
//
//    public List<String> disabledElements = new ArrayList<>();
//
//    /**
//     * Method to add record in table.
//     * @param fields input names based on ID
//     * @return names of filled inputs
//     */
//    public Map<String,String> addNewRecord(String[] fields){
//        addButton.click();
//        AddForm addForm = new AddForm();
//        addForm.addOrEditRequiredFields(fields, Enums.Action.ADD);
//        waitForElementToDisappear(processing);
//        return addForm.inputValues;
//    }
//
//    /**
//     * Method to edit record in table.
//     * @param fields inputs names based on ID
//     * @return names of filled inputs
//     */
//    public Map<String,String> editRecord (String[] fields) {
//        editButton.click();
//        AddForm addForm = new AddForm();
//        disabledElements = addForm.getDisabledField();
//        addForm.addOrEditRequiredFields(fields, Enums.Action.EDIT);
//        waitForElementToDisappear(processing);
//        return addForm.inputValues;
//    }
//
//    /**
//     * Method removes existing task.
//     * Before this action, it checks if is row already selected.
//     */
//    public void removeRecord() {
//        removeButton.click();
//        new RemoveForm().deleteRecord();
//        waitForElementToDisappear(processing);
//    }
//
//    /**
//     * Method removes tasks generated by automation tests.
//     */
//    public void cleanDatabase(WebElement element) {
//        if(checkIfRecordExists("-autotest-", element)){
//            selectAllBox.click();
//            removeRecord();
//        }
//    }
//
//    /**
//     * Methods tests, if task exists in table.
//     * @param task name of task whose presence is tested
//     * @return boolean
//     */
//    public boolean checkIfRecordExists(String task, WebElement element) {
//        element.clear();
//        element.sendKeys(task);
//        element.sendKeys(Keys.ENTER);
//        waitForElementToDisappear(processing);
//        return !elementPresence(By.cssSelector(".dataTables_empty"));
//    }
//
//
//    /**
//     * Method exports table records.
//     * @param fileName name of exported file
//     */
//    public void exportData(String fileName){
//        exportButton.click();
//        new ExportForm().basicExport(fileName);
//    }
//
//
//
//
//    /**
//     * User insert name of dataTable.
//     * @param tableName tame of DataTable
//     * @return list of dataTable columns names
//     */
//    public List<String> getDataTableColumnsNames(String tableName){
//        TableJSLocator table = new TableJSLocator(tableName);
//        Iterator itr = table._columns.iterator();
//        List<String>names= new ArrayList<>();
//        while (itr.hasNext()){
//            names.add((String) ((Map<String, Object>) itr.next()).get("title"));
//        }
//        return names;
//    }
//
//    /**
//     *
//     * @return list of visible table columns
//     */
//    public List<String> getVisibleColumnsNames() {
//        List<WebElement> tableColumns = findElements(By.xpath("//div[@class='dataTables_scrollHeadInner']/table/thead/tr[1]/th"));
//        List<String>names= new ArrayList<>();
//        WebElement firstColumn = tableColumns.get(0);
//        for (WebElement column:tableColumns
//             ) {
//            ((JavascriptExecutor)driver).executeScript("arguments[0].scrollIntoView();", column);
//            names.add(column.getText());
//        }
//        ((JavascriptExecutor)driver).executeScript("arguments[0].scrollIntoView();", firstColumn);
//        return names;
//    }
//
//    /**
//     *
//     * @return list of required input fields from input form
//     */
//    public List<WebElement> getRequiredFields(){
//        AddForm addForm = new AddForm();
//        addForm.getAddButton().click();
//        List<WebElement> requiredFields=new ArrayList<>();
//        // TODO fix encoding and change locator
//        // String validationMessageXpath="//div[text()='nemôže byť prázdne']";
//        String validationMessageXpath="//div[contains(@class,'is-invalid')]/div/div[contains(@class,'text-danger')]";
//        if (elementPresence(By.xpath(validationMessageXpath))){
//            By validationMessageLocator = By.xpath(validationMessageXpath);
//            int requiredFieldsCount = findElements(validationMessageLocator).size();
//            for (int order=1;order<=requiredFieldsCount;order++){
//                String orderedLocator = new StringBuilder(validationMessageXpath).insert(validationMessageXpath.indexOf("]")+1,"["+order+"]").toString();
//                requiredFields.add(findElement(By.xpath(orderedLocator+"/parent::*//input")));
//            }
//        }
//        return requiredFields;
//    }
//
//    /**
//     * Remove all active filters and sort output from newest to oldest
//     */
//    public void clearFilter(){
//        while (elementPresence(By.className("dt-filter-labels__link"))){
//            findElement(By.className("dt-filter-labels__link")).click();
//        }
//        //TODO temporary condition until fix
//        if (driver.getCurrentUrl().contains("audit")){
//            findElement(By.xpath("//th[text()='Id']")).click();
//        }else {
//            findElement(By.xpath("//th[text()='ID']")).click();
//        }
//        waitForPageLoaded();
//    }
//
//    /**
//     * Method returns number of records generated by automation tests.
//     * @param element element on which is table filtered
//     * @param table name of table
//     * @return number of records in table
//     */
//    public int numberOfTableRows(WebElement element, TableModel table){
//        element.clear();
//        element.sendKeys("-autotest-");
//        element.sendKeys(Keys.ENTER);
//        By tableRowXpath =By.xpath(table.getTableXpath() +"/tr");
//        return findElements(tableRowXpath).size();
//    }
//
//    /**
//     * Method returns table row data.
//     * @return table row data in format: column name -> cell value
//     */
//    public Map<String,String> getRowData(TableModel table){
//        Map<String,String> rowData=new HashMap<>();
//        for (int i=0; i<table.getNumberOfColumns(); i++){
//            rowData.put(table.getColumnsNames()[i],findElement(By.xpath(String.format(table.getTableXpath()+"/tr[1]/td[%d]",i+1))).getText());
//        }
//        return rowData;
//    }
//
//    //locators
//    @FindBy(className = "buttons-create")
//    private WebElement addButton;
//    @FindBy(className = "buttons-edit")
//    private WebElement editButton;
//    @FindBy(className = "buttons-remove")
//    private WebElement removeButton;
//    @FindBy(css = "button[data-target='#datatableExportModal']")
//    private WebElement exportButton;
//    @FindBy(className = "buttons-select-all")
//    private WebElement selectAllBox;
//    @FindBy(id = "DataTables_Table_0_processing")
//    private WebElement processing;
//}